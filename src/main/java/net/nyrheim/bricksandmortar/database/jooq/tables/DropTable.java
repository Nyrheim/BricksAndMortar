/*
 * This file is generated by jOOQ.
 */
package net.nyrheim.bricksandmortar.database.jooq.tables;


import java.util.Arrays;
import java.util.List;

import net.nyrheim.bricksandmortar.database.jooq.Keys;
import net.nyrheim.bricksandmortar.database.jooq.Nyrheim;
import net.nyrheim.bricksandmortar.database.jooq.tables.records.DropTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DropTable extends TableImpl<DropTableRecord> {

    private static final long serialVersionUID = 920869244;

    /**
     * The reference instance of <code>nyrheim.drop_table</code>
     */
    public static final DropTable DROP_TABLE = new DropTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DropTableRecord> getRecordType() {
        return DropTableRecord.class;
    }

    /**
     * The column <code>nyrheim.drop_table.id</code>.
     */
    public final TableField<DropTableRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>nyrheim.drop_table.name</code>.
     */
    public final TableField<DropTableRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>nyrheim.drop_table</code> table reference
     */
    public DropTable() {
        this(DSL.name("drop_table"), null);
    }

    /**
     * Create an aliased <code>nyrheim.drop_table</code> table reference
     */
    public DropTable(String alias) {
        this(DSL.name(alias), DROP_TABLE);
    }

    /**
     * Create an aliased <code>nyrheim.drop_table</code> table reference
     */
    public DropTable(Name alias) {
        this(alias, DROP_TABLE);
    }

    private DropTable(Name alias, Table<DropTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private DropTable(Name alias, Table<DropTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DropTable(Table<O> child, ForeignKey<O, DropTableRecord> key) {
        super(child, key, DROP_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Nyrheim.NYRHEIM;
    }

    @Override
    public Identity<DropTableRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DROP_TABLE;
    }

    @Override
    public UniqueKey<DropTableRecord> getPrimaryKey() {
        return Keys.KEY_DROP_TABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DropTableRecord>> getKeys() {
        return Arrays.<UniqueKey<DropTableRecord>>asList(Keys.KEY_DROP_TABLE_PRIMARY);
    }

    @Override
    public DropTable as(String alias) {
        return new DropTable(DSL.name(alias), this);
    }

    @Override
    public DropTable as(Name alias) {
        return new DropTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DropTable rename(String name) {
        return new DropTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DropTable rename(Name name) {
        return new DropTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
